%option noyywrap

%{
// Include the header generated by Bison to get access to the token types
#include <cstdlib>
#include "parser2.hpp"

#define YY_DECL int yylex(yy::parser::semantic_type *yylval, yy::parser::location_type *yylloc)
#define YY_USER_ACTION yyloc->columns (yyleng);

typedef yy::parser::token token;

// YYSTYPE is the union type defined in the Bison file
// extern YYSTYPE yylval; 

%}
%%

%{
    yylloc->step();
%}

"+"         { return token::PLUS }
"-"         { return token::MINUS }
"*"         { return token::MUL }
"/"         { return token::DIV}
"("         { return token::OPEN_PAREN}
")"         { return token::CLOSE_PAREN}

[0-9]+      { yylval.intval = atoi(yytext); 
                return INT_LITERAL; }

"+"         { return PLUS; }
"-"         { return MINUS; }

.           { return yytext[0]; }

%%

int yywrap() {
    return 1;
}

void scanner_destroy() {
    // TODO: investigate a better way to do this 
    yylex_destroy(); 
}

void scanner_init(const char* code) {
    // TOOD: investigate a better way to do this
    yy_scan_string(code); 
}